{"version":3,"sources":["index.js"],"names":["parse","childlessTags","closingTags","closingTagAncestorBreakers","li","dt","dd","voidTags","parseDefaults","format","str","options","tokens","nodes"],"mappings":";;;;;;QAkDgBA,K,GAAAA,K;;AAlDhB;;;;AACA;;;;AACA;;;;;;AAEA;;;;AAIA,IAAMC,gBAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,CAAtB;;AAEA;;;;AAIA,IAAMC,cAAc,CAClB,MADkB,EACV,MADU,EACF,MADE,EACM,GADN,EACW,IADX,EACiB,IADjB,EACuB,IADvB,EAC6B,QAD7B,EAElB,OAFkB,EAET,IAFS,EAEH,OAFG,EAEM,IAFN,EAEY,IAFZ,EAEkB,OAFlB,EAE2B,UAF3B,CAApB;;AAKA;;;;;;;AAOA,IAAMC,6BAA6B;AACjCC,MAAI,CAAC,IAAD,EAAO,IAAP,EAAa,MAAb,CAD6B;AAEjCC,MAAI,CAAC,IAAD,CAF6B;AAGjCC,MAAI,CAAC,IAAD;AAH6B,CAAnC;;AAMA;;;;AAIA,IAAMC,WAAW,CACf,UADe,EACH,MADG,EACK,MADL,EACa,IADb,EACmB,KADnB,EAC0B,SAD1B,EAEf,OAFe,EAEN,IAFM,EAEA,KAFA,EAEO,OAFP,EAEgB,QAFhB,EAE0B,MAF1B,EAGf,MAHe,EAGP,OAHO,EAGE,QAHF,EAGY,OAHZ,EAGqB,KAHrB,CAAjB;;AAMO,IAAMC,wCAAgB;AAC3BD,oBAD2B;AAE3BL,0BAF2B;AAG3BC,wDAH2B;AAI3BF,8BAJ2B;AAK3BQ,qBAL2B,CAKpB;AALoB,CAAtB;;AAQA,SAAST,KAAT,CAAgBU,GAAhB,EAA8C;AAAA,MAAzBC,OAAyB,uEAAfH,aAAe;;AACnD,MAAMI,SAAS,qBAAMF,GAAN,EAAWC,OAAX,CAAf;AACA,MAAME,QAAQ,sBAAOD,MAAP,EAAeD,OAAf,CAAd;AACA,SAAO,iBAAOE,KAAP,EAAcF,OAAd,CAAP;AACD;;kBAEc,EAACX,YAAD,EAAQQ,4BAAR,E","file":"index.js","sourcesContent":["import lexer from './lexer'\nimport parser from './parser'\nimport format from './formats/v0'\n\n/*\n  Tags which contain arbitrary non-parsed content\n  For example: <script> JavaScript should not be parsed\n*/\nconst childlessTags = ['style', 'script', 'template']\n\n/*\n  Tags which auto-close because they cannot be nested\n  For example: <p>Outer<p>Inner is <p>Outer</p><p>Inner</p>\n*/\nconst closingTags = [\n  'html', 'head', 'body', 'p', 'dt', 'dd', 'li', 'option',\n  'thead', 'th', 'tbody', 'tr', 'td', 'tfoot', 'colgroup'\n]\n\n/*\n  Closing tags which have ancestor tags which\n  may exist within them which prevent the\n  closing tag from auto-closing.\n  For example: in <li><ul><li></ul></li>,\n  the top-level <li> should not auto-close.\n*/\nconst closingTagAncestorBreakers = {\n  li: ['ul', 'ol', 'menu'],\n  dt: ['dl'],\n  dd: ['dl']\n}\n\n/*\n  Tags which do not need the closing tag\n  For example: <img> does not need </img>\n*/\nconst voidTags = [\n  '!doctype', 'area', 'base', 'br', 'col', 'command',\n  'embed', 'hr', 'img', 'input', 'keygen', 'link',\n  'meta', 'param', 'source', 'track', 'wbr'\n]\n\nexport const parseDefaults = {\n  voidTags,\n  closingTags,\n  closingTagAncestorBreakers,\n  childlessTags,\n  format // transform for v0 spec\n}\n\nexport function parse (str, options = parseDefaults) {\n  const tokens = lexer(str, options)\n  const nodes = parser(tokens, options)\n  return format(nodes, options)\n}\n\nexport default {parse, parseDefaults}\n"]}